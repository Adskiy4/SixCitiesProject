openapi: 3.0.0
info:
  title: API для проекта \"Шесть городов\".
  description: |-
    *Список ресурсов и маршрутов сервера "Шесть городов".
  version: "1.0.0"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
tags:
  - name: offers
    description: Действия с объявлениями.
  - name: users
    description: Действия с пользователями.
  - name: comments
    description: Действия с комментариями.

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя

      requestBody:
        description: Информация для создания нового пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "409":
          description: Пользователь с таким email уже существует

  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля

      requestBody:
        description: Логин и пароль авторизующегося пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
        required: true

      responses:
        "200":
          description: Пользователь авторизован. Токен пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authToken'

        "401":
          description: Ошибка авторизации. Неправильный логин или пароль

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю
      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=

      responses:
        "200":
          description: Статус авторизации пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "401":
          description: Пользователь не авторизован

  /users/logout:
    delete:
      tags:
        - users
      summary: Завершение сессии пользователя.
      description: Разлогинивает пользователя и аннулирует токен.
      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string

      responses:
        "204":
          description: Пользователь разлогинен

        "401":
          description: Пользователь не авторизован

  /users/{userId}:
    get:
      tags:
        - users
      summary: Получить данные пользователя по userId
      parameters:
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "404":
          description: Пользователь не найден

  /users/{userId}/favorites:
    get:
      tags:
        - users
      summary: Получить список избранных предложений пользователя
      parameters:
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Список избранных предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offer'
    post:
      tags:
        - users
      summary: Добавить предложение в избранное пользователя
      parameters:
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string

      requestBody:
        description: ID предложения, добавляемого в избранное
        content:
          application/json:
            schema:
              type: object
              properties:
                offerId:
                  type: string
        required: true

      responses:
        "201":
          description: Предложение добавлено в избранное

        "400":
          description: Некорректные данные

  /users/{userId}/favorites/{offerId}:
    delete:
      tags:
        - users
      summary: Удалить предложение из избранного
      parameters:
        - name: userId
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
        - name: offerId
          in: path
          description: Идентификатор предложения
          required: true
          schema:
            type: string

      responses:
        "204":
          description: Предложение удалено из избранного
        "404":
          description: Предложение не найдено

  /offers:
      get:
        tags:
          - offers
        summary: Получение списка предложений
        description: Возвращает список всех объявлений
        responses:
          "200":
            description: Список объявлений
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/offerListItem'

      post:
        tags:
          - offers
        summary: Создание нового предложения
        description: Добавляет новое объявление
        requestBody:
          description: Информация для создания нового объявления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createOffer'
          required: true
        responses:
          "201":
            description: Объявление создано
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/offer'

  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Получение конкретного предложения
      description: Возвращает данные одного объявления по идентификатору
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Объект объявления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        "404":
          description: Объявление не найдено

    patch:
      tags:
        - offers
      summary: Обновление предложения
      description: Обновляет существующее объявление
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Данные для обновления объявления
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateOffer'
        required: true
      responses:
        "200":
          description: Объявление обновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

    delete:
      tags:
        - offers
      summary: Удаление предложения
      description: Удаляет объявление по идентификатору
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Объявление удалено

  /comments:
    get:
      tags:
        - comments
      summary: Получить список всех комментариев
      description: Возвращает список всех комментариев
      responses:
        "200":
          description: Список комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'

  /comments/{commentId}:
    get:
      tags:
        - comments
      summary: Получить комментарий по ID
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Объект комментария
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        "404":
          description: Комментарий не найден

    delete:
      tags:
        - comments
      summary: Удалить комментарий
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Комментарий удалён

  /offers/{offerId}/comments:
    get:
      tags:
        - comments
      summary: Получить комментарии для конкретного объявления
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Список комментариев для объявления
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'
    post:
      tags:
        - comments
      summary: Добавить комментарий к объявлению
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createComment'
      responses:
        "201":
          description: Комментарий успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'

components:
  schemas:
    createUser:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [обычный, pro]
        password:
          type: string
        avatarUrl:
          type: string

    loginUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    user:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
        type:
          type: string
          enum: [обычный, pro]

    authToken:
      type: object
      properties:
        token:
          type: string

    createOffer:
      type: object
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        city:
          type: string
          enum: [Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf]
        previewImage:
          type: string
        images:
          type: array
          items:
            type: string
          minItems: 6
          maxItems: 6
        isPremium:
          type: boolean
          example: true
        type:
          type: string
          enum: [apartment, house, room, hotel]
        rooms:
          type: integer
          minimum: 1
          maximum: 8
        guests:
          type: integer
          minimum: 1
          maximum: 10
        price:
          type: integer
          minimum: 100
          maximum: 100000
        conveniences:
          type: array
          items:
            type: string
            enum: [Breakfast, Air conditioning, Laptop friendly workspace, Baby seat, Washer, Towels, Fridge]
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number

    updateOffer:
      type: object
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        city:
          type: string
          enum: [Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf]
        previewImage:
          type: string
        images:
          type: array
          items:
            type: string
          minItems: 6
          maxItems: 6
        isPremium:
          type: boolean
          example: false
        type:
          type: string
          enum: [apartment, house, room, hotel]
        rooms:
          type: integer
          minimum: 1
          maximum: 8
        guests:
          type: integer
          minimum: 1
          maximum: 10
        price:
          type: integer
          minimum: 100
          maximum: 100000
        conveniences:
          type: array
          items:
            type: string
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number

    offer:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        publishDate:
          type: string
          format: date-time
        city:
          type: string
        adImage:
          type: string
        images:
          type: array
          items:
            type: string
        isPremium:
          type: boolean
        isFavorite:
          type: boolean
        rating:
          type: number
          minimum: 1
          maximum: 5
        housingType:
          type: string
        rooms:
          type: integer
        guests:
          type: integer
        price:
          type: integer
        conveniences:
          type: array
          items:
            type: string
        author:
          $ref: '#/components/schemas/user'
        commentsCount:
          type: integer
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number

    offerListItem:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        publishDate:
          type: string
          format: date-time
        city:
          type: string
        adImage:
          type: string
        isPremium:
          type: boolean
        isFavorite:
          type: boolean
        rating:
          type: number
        type:
          type: string
        price:
          type: integer
        commentsCount:
          type: integer

    createComment:
      type: object
      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
        rating:
          type: integer
          minimum: 1
          maximum: 5

    comment:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        publishDate:
          type: string
          format: date-time
        rating:
          type: integer
        user:
          $ref: '#/components/schemas/user'
